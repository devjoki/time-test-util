/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.6.4/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id "io.freefair.lombok" version "8.6"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}
sourceSets {
    intTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    intTestAnnotationProcessor.extendsFrom annotationProcessor
    intTestImplementation.extendsFrom testImplementation
    intTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
  compileOnly 'org.projectlombok:lombok:1.18.30'
	annotationProcessor 'org.projectlombok:lombok:1.18.30'
	
	testCompileOnly 'org.projectlombok:lombok:1.18.30'
	intTestCompileOnly 'org.projectlombok:lombok:1.18.30'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
	intTestAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
 // intTestAnnotationProcessor 'io.micronaut:micronaut-inject-java'
 intTestAnnotationProcessor "io.micronaut:micronaut-inject-java:$micronautVersion"
 intTestImplementation "io.micronaut:micronaut-runtime:$micronautVersion"
 implementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
 intTestImplementation "io.micronaut.test:micronaut-test-junit5:4.2.1"
 implementation "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
 intTestImplementation "org.springframework.boot:spring-boot-starter-test:$springVersion"
 intTestImplementation "org.springframework.boot:spring-boot-starter:$springVersion"

}

tasks.named('test', Test) {
    useJUnitPlatform()

    maxHeapSize = '1G'

     testLogging {
         events "passed", "failed", "skipped"
         exceptionFormat "full"
         showExceptions true
         showCauses true
         showStackTraces true
     }
}

tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
    shouldRunAfter test

    useJUnitPlatform()

     testLogging {
         events "passed", "failed", "skipped"
         exceptionFormat "full"
         info
         showExceptions true
         showCauses true
         showStackTraces true
     }
}

check.dependsOn integrationTest

