/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.joco;

import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.util.Optional;
import java.util.function.Supplier;

import org.junit.jupiter.api.extension.AfterAllCallback;
import org.junit.jupiter.api.extension.AfterEachCallback;
import org.junit.jupiter.api.extension.BeforeAllCallback;
import org.junit.jupiter.api.extension.BeforeEachCallback;
import org.junit.jupiter.api.extension.ExtensionContext;
import org.junit.jupiter.api.extension.ExtensionContext.Namespace;
import org.junit.jupiter.api.extension.ParameterContext;
import org.junit.jupiter.api.extension.ParameterResolutionException;
import org.junit.jupiter.api.extension.ParameterResolver;

public class TimeUtilsExtension
        implements BeforeAllCallback, ParameterResolver, BeforeEachCallback, AfterEachCallback, AfterAllCallback {
    private static final Namespace NAMESPACE = Namespace.create(TimeUtilsExtension.class, "clock");
    private static final String CLOCK_KEY = "clock";

    @Override
    public void beforeAll(ExtensionContext context) throws Exception {
        var clock = getOrCreateClock(context);
        context.getTestClass()
                .map(testClass -> testClass.getAnnotation(CurrentTime.class))
                .ifPresent(a -> clock.newClassLevelTime(
                        LocalDate.parse(a.datePattern()).atTime(LocalTime.parse(a.timePattern())),
                        ZoneId.of(a.zoneId())));
    }

    @Override
    public void beforeEach(ExtensionContext context) throws Exception {
        var clock = getClock(context);
        context.getTestMethod()
                .map(method -> method.getAnnotation(CurrentTime.class))
                .ifPresent(a -> clock.newMethodLevelTime(
                        LocalDate.parse(a.datePattern()).atTime(LocalTime.parse(a.timePattern())),
                        ZoneId.of(a.zoneId())));
    }

    @Override
    public void afterEach(ExtensionContext context) throws Exception {
        getClock(context).clearMethodLevelClock();
    }

    @Override
    public void afterAll(ExtensionContext context) throws Exception {
        getClock(context).clearClassLevelClock();
    }

    @Override
    public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext)
            throws ParameterResolutionException {
        return isParameterClock(parameterContext);
    }

    @Override
    public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext)
            throws ParameterResolutionException {
        if (!isParameterClock(parameterContext)) {
            throw new ParameterResolutionException("TimeUtilsExtension can only resolve 'Clock' parameter...!");
        }
        return Optional.ofNullable(extensionContext.getStore(NAMESPACE).get(CLOCK_KEY, ExtensionResource.class))
                .map(ExtensionResource::getValue)
                .map(this::createSupplier)
                .orElseThrow(() -> new ParameterResolutionException("Cannot find the clock instance in the store!"));
    }

    private Supplier<Object> createSupplier(Object clock) {
        return () -> clock;
    }

    @SuppressWarnings("unchecked")
    private ModifiableClock getOrCreateClock(ExtensionContext context) {
        ExtensionResource<ModifiableClock> resource = context.getRoot().getStore(NAMESPACE).getOrComputeIfAbsent(CLOCK_KEY,
                key -> new ExtensionResource<ModifiableClock>(new ModifiableClock()), ExtensionResource.class);
        return resource.getValue();
    }

    @SuppressWarnings("unchecked")
    private ModifiableClock getClock(ExtensionContext extensionContext) {
        ExtensionResource<ModifiableClock> resource = extensionContext.getRoot().getStore(NAMESPACE).get(CLOCK_KEY,
                ExtensionResource.class);
        return Optional.ofNullable(resource)
                .map(ExtensionResource::getValue)
                .orElseThrow(() -> new ParameterResolutionException("Cannot find the clock instance in the store!"));
    }

    public boolean isParameterClock(ParameterContext parameterContext) {
        var type = parameterContext.getParameter().getType();
        var parameterizedType = parameterContext.getParameter().getParameterizedType();
        return type == Supplier.class && parameterizedType.getTypeName().equals("java.util.function.Supplier<java.time.Clock>");
    }

}
